name: dsrhub_http_create_dsr_request
title_format: 'dsrhub_http_create_dsr_requestd'
description: dsrhub http request (sync and async)
auto_runnable: true
result_format:
  controller_id: >-
    {{if .input.callback_enabled}}{{field "resolver_input" "callback" "controller_id"}}
    {{else}}{{.step.request.output.controller_id}}{{- end}}
  subject_request_id: >-
    {{if .input.callback_enabled}}{{field "resolver_input" "callback" "subject_request_id"}}
    {{else}}{{.step.request.output.subject_request_id}}{{- end}}
  request_status: >-
    {{if .input.callback_enabled}}{{field "resolver_input" "callback" "request_status"}}
    {{else}}{{.step.request.output.request_status}}{{- end}}
  input: '{{.input | toJson}}'

inputs:
# remote dsrhub request
- name: url
  description: dsrhub create_dsr_request url
  default: 'http://openmock:9999/service-candidate-id/dsrhub/create_dsr_request'
- name: callback_url_base
  description: callback url base
  default: 'http://utask:8081/dsrhub/callback'
- name: request_type
  description: dsrhub request type
  default: erasure
  legal_values:
    - erasure
    - portability
- name: regulation
  description: dsrhub regulation
  default: gdpr
  legal_values:
    - gdpr
    - ccpa
- name: callback_enabled
  description: async webhook callback
  type: bool
  default: true
# identity
- name: identity_type
  description: identity Type
  default: email
- name: identity_format
  description: identity Format
  default: raw
- name: identity_value
  description: identity value
  default: zzzz@example.com

steps:
  request:
    description: Send dsrhub request
    action:
      type: http
      configuration:
        url: '{{.input.url}}'
        method: POST
        body: >
          {
            "subject_request_id": "{{.task.resolution_id}}",
            "subject_request_type": "{{.input.request_type}}",
            "identity_type": "{{.input.identity_type}}",
            "identity_format": "{{.input.identity_format}}",
            "identity_value": "{{.input.identity_value}}",
            "status_callback_url": "{{.input.callback_url_base}}/{{.task.resolution_id}}/callback"
          }

  callback:
    description: Wait for remote dsrhub callback
    dependencies: ["request"]
    action:
      type: echo
      configuration:
        output:
          metadata: '{{field "resolver_input" "callback" | toJson}}'
    conditions:
    - type: skip
      if:
      - value: '{{.input.callback_enabled}}'
        operator: NE
        expected: true
      then:
        this: DONE
      message: 'sync request and no need to wait for callback'
    - type: check
      if:
      - value: '{{field "resolver_input" "callback" "request_status"}}'
        operator: NE
        expected: 'completed'
      then:
        this: TO_RETRY
      message: 'service is waiting for callback from remote dsrhub service'
