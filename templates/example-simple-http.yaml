name: example-dsrhub-workflow
title_format: DSRHub workflow
description: DSRHub workflow

inputs:
- name: identity_type
  description: Identity Type
  default: email
  legal_values:
    - email
    - candidate_id
    - ios_advertising_id
    - android_advertising_id
    - android_id
- name: identity_format
  description: Identity Format
  default: raw
  legal_values:
    - md5
    - raw
    - sha1
    - sha256
- name: identity_value
  description: Identity Value
  default: zzzz@example.com

resolver_inputs:
- name: service_b_callback_state
  description: service b callback state
  default: pending

steps:
  getTime:
    description: Get UTC time
    action:
      type: http
      configuration:
        url: http://worldclockapi.com/api/json/utc/now
        method: GET
  getUser:
    description: Get user
    dependencies: ["getTime"]
    custom_states: [NOT_FOUND]
    action:
      type: http
      configuration:
        url: http://openmock:9999/users/not_found
        method: GET
    conditions:
    - type: check
      if:
      - value: '{{.step.getUser.metadata.HTTPStatus}}'
        operator: EQ
        expected: '404'
      then:
        this: NOT_FOUND
      message: 'User {{.input.identity_value}} not found'
  createUser:
    description: Create the user
    dependencies: ["getUser:NOT_FOUND"]
    action:
      type: http
      configuration:
        url: http://openmock:9999/users
        method: POST
        body: |-
          {"email":"{{.input.identity_value}}"}
  getUserCopy:
    description: Get user
    dependencies: ["getTime"]
    custom_states: [NOT_FOUND]
    action:
      type: http
      configuration:
        url: http://openmock:9999/users/not_found
        method: GET
    conditions:
    - type: check
      if:
      - value: '{{.step.getUserCopy.metadata.HTTPStatus}}'
        operator: EQ
        expected: '404'
      then:
        this: NOT_FOUND
      message: 'User {{.input.identity_value}} not found'
  createUserCopy:
    description: Create the user
    dependencies: ["getUserCopy:NOT_FOUND"]
    action:
      type: http
      configuration:
        url: http://openmock:9999/users
        method: POST
        body: |-
          {"email":"{{.input.identity_value}}"}
  mapEmailToCandidateID:
    description: Map email to candidate_id
    dependencies: ["getTime"]
    action:
      type: http
      configuration:
        url: http://openmock:9999/users/found
        method: GET
  deleteServiceA:
    description: Delete candidate_id from service A
    dependencies: ["mapEmailToCandidateID"]
    action:
      type: http
      configuration:
        url: http://openmock:9999/service_a/users/candidate_id/{{.step.mapEmailToCandidateID.output.candidate_id}}
        method: DELETE

  deleteServiceBEmail:
    description: Delete email from service B
    dependencies: ["getTime"]
    action:
      type: http
      configuration:
        url: 'http://openmock:9999/service_b/users/email/{{.input.identity_value}}'
        method: DELETE
        body: 'http://utask:8081/resolution/{{.task.resolution_id}}/reinstitute'
        headers:
        - name: x-callback-url
          value: 'http://utask:8081/resolution/{{.task.resolution_id}}/reinstitute'
  waitServiceBCallback:
    description: Wait for service B callback
    dependencies: ["getTime", "deleteServiceBEmail"]
    action:
      type: echo
      configuration:
        output:
          state: '{{.resolver_input.service_b_callback_state}}'
    conditions:
    - type: check
      if:
      - value: '{{.resolver_input.service_b_callback_state}}'
        operator: NE
        expected: 'done'
      then:
        this: TO_RETRY
      message: 'service B is pending'
  notifyServiceBDeletion:
    description: notify service B deletion
    dependencies: ["waitServiceBCallback"]
    action:
      type: echo
      configuration:
        output:
          hello: world
