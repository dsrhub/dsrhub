syntax = "proto3";

package idl.dsrhub;
option go_package = "github.com/dsrhub/dsrhub/idl_dsrhub";

message CreateDSRRequest {
  string api_version              = 1; /// e.g. "2.0"
  string regulation               = 2; /// e.g. "gdpr", "ccpa"
  string status_callback_url      = 3;
  string subject_request_id       = 4; /// UUID v4 string. This MUST be generated by the Controller at the time of request submission to a Processor.
  string subject_request_type     = 5; /// e.g. "portability", "erasure"
  string identity_type            = 6; /// e.g. "email", "controller_customer_id", "android_id"
  string identity_format          = 7; /// e.g. "md5", "raw", "sha1", "sha256"
  string identity_value           = 8; /// e.g. "zzzz@example.com", if multiple, one can use a separator like ','
}

message CreateDSRResponse {
  string api_version              = 1; /// e.g. "2.0"
  string regulation               = 2; /// e.g. "gdpr", "ccpa"
  string request_status           = 3; /// e.g. "pending", "in_progress", "completed", "cancelled"
  string subject_request_id       = 4; /// UUID v4 string. This MUST be generated by the Controller at the time of request submission to a Processor.
  string subject_request_type     = 5; /// e.g. "portability", "erasure"
  string identity_type            = 6; /// e.g. "email", "controller_customer_id", "android_id"
  string identity_format          = 7; /// e.g. "md5", "raw", "sha1", "sha256"
  string identity_value           = 8; /// e.g. "zzzz@example.com", if multiple, one can use a separator like ','
  string controller_id            = 9; /// string indicating the unique identity of the Controller in the Processorâ€™s system.
}

service OpenDSRService {
  rpc CreateDSR(CreateDSRRequest) returns (CreateDSRResponse);
}
