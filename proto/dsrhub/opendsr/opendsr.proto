syntax = "proto3";

package dsrhub.opendsr;
option go_package = "github.com/dsrhub/dsrhub/proto/dsrhub/opendsr";

message Identity {
  string identity_type   = 1; /// e.g. "email", "controller_customer_id", "android_id"
  string identity_format = 2; /// e.g. "md5", "raw", "sha1", "sha256"
  string identity_value  = 3; /// e.g. "johndoe@example.com"
}

message CreateDSRRequest {
  string api_version                          = 1; /// e.g. "2.0"
  string regulation                           = 2; /// e.g. "gdpr", "ccpa"
  string subject_request_id                   = 3; /// UUID v4 string. This MUST be generated by the Controller at the time of request submission to a Processor.
  string subject_request_type                 = 4; /// e.g. "portability", "erasure"
  repeated Identity subject_identities        = 5; /// array of Identity objects
  repeated string status_callback_urls        = 6;
}

message CreateDSRResponse {
  string api_version                          = 1; /// e.g. "2.0"
  string regulation                           = 2; /// e.g. "gdpr", "ccpa"
  string subject_request_id                   = 3; /// UUID v4 string. This MUST be generated by the Controller at the time of request submission to a Processor.
  string subject_request_type                 = 4; /// e.g. "portability", "erasure"
  repeated Identity subject_identities        = 5; /// array of Identity objects
  string controller_id                        = 6; /// string indicating the unique identity of the Controller in the Processorâ€™s system.
  string request_status                       = 7; /// e.g. "pending", "in_progress", "completed", "cancelled"
}

service OpenDSRService {
  rpc CreateDSR(CreateDSRRequest) returns (CreateDSRResponse);
}
