syntax = "proto3";

package dsrhub.opendsr;
option go_package = "github.com/dsrhub/dsrhub/proto/dsrhub/opendsr";

message Identity {
  string identity_type   = 1; /// e.g. "email", "controller_customer_id", "android_id"
  string identity_format = 2; /// e.g. "md5", "raw", "sha1", "sha256"
  string identity_value  = 3; /// e.g. "johndoe@example.com"
}

message GetDiscoveryRequest {}

message GetDiscoveryResponse {
  string api_version                     = 1; /// e.g. "2.0"
  repeated Identity supported_identities = 2; /// array of "identity_type" and "identity_format" pairs.
  string supported_subject_request_types = 3; /// e.g. "access" "portability" "erasure"
}

message CreateDSRRequest {
  string api_version                          = 1; /// e.g. "2.0"
  string regulation                           = 2; /// e.g. "gdpr", "ccpa"
  string subject_request_id                   = 3; /// UUID v4 string. This MUST be generated by the Controller at the time of request submission to a Processor.
  string subject_request_type                 = 4; /// e.g. "portability", "erasure"
  string submitted_time                       = 5; /// e.g. "2020-04-23T21:52:11.709Z", RFC 3339 date string representing the time of the original request by the data subject.
  repeated Identity subject_identities        = 6; /// array of Identity objects
  repeated string status_callback_urls        = 7;
}

message CreateDSRResponse {
  string api_version              = 1; /// e.g. "2.0"
  string controller_id            = 2; /// string indicating the unique identity of the Controller in the Processor’s system.
  string expected_completion_time = 3; /// RFC 3339 date string representing the time when the Processor expects to fulfill the request.
  string received_time            = 4; /// RFC 3339 date string representing the time when the Processor received the request.
  string encoded_request          = 5; /// Base64 encoding of the entire body of the OpenDSR request. Controllers MUST NOT log or store this.
  string subject_request_id       = 6; /// UUID v4 string from the originating OpenDSR request.
}

message GetDSRRequest {
  string api_version        = 1; /// e.g. "2.0"
  string subject_request_id = 2; /// UUID v4 string from the originating OpenDSR request.
}

message GetDSRResponse {
  string api_version              = 1; /// e.g. "2.0"
  string controller_id            = 2; /// string indicating the unique identity of the Controller in the Processor’s system.
  string expected_completion_time = 3; /// RFC 3339 date string representing the time when the Processor expects to fulfill the request.
  string subject_request_id       = 4; /// UUID v4 string from the originating OpenDSR request.
  string request_status           = 5; /// e.g. "pending", "in_progress", "completed", "cancelled"
  string results_url              = 6; /// A valid URL where the results of the request are available.
  string results_count            = 7; /// A count of results found when fulfilling this request.
}

message CancelDSRRequest {
  string api_version        = 1; /// e.g. "2.0"
  string subject_request_id = 2; /// UUID v4 string from the originating OpenDSR request.
}

message CancelDSRResponse {
  string api_version        = 1; /// e.g. "2.0"
  string controller_id      = 2; /// string indicating the unique identity of the Controller in the Processor’s system.
  string received_time      = 3; /// RFC 3339 date string representing the time when the Processor received the request.
  string subject_request_id = 4; /// UUID v4 string from the originating OpenDSR request.
}

message CallbackRequest {
  string api_version                   = 1; /// e.g. "2.0"
  string controller_id                 = 2; /// string indicating the unique identity of the Controller in the Processor’s system.
  string expected_completion_time      = 3; /// RFC 3339 date string representing the time when the Processor expects to fulfill the request.
  repeated string status_callback_urls = 4; /// Array of urls to be invoked by the Processor on subject_request_status change.
  string subject_request_id            = 5; /// UUID v4 string from the originating OpenDSR request.
  string request_status                = 6; /// e.g. "pending", "in_progress", "completed", "cancelled"
  string results_url                   = 7; /// A valid URL where the results of the request are available.
  string results_count                 = 8; /// A count of results found when fulfilling this request.
}

message CallbackResponse {
  string msg = 1; /// msg reply of the callback
}


service OpenDSRService {
  rpc GetDiscovery(GetDiscoveryRequest) returns (GetDiscoveryResponse);
  rpc CreateDSR(CreateDSRRequest) returns (CreateDSRResponse);
  rpc GetDSR(GetDSRRequest) returns (GetDSRResponse);
  rpc CancelDSR(CancelDSRRequest) returns (CancelDSRResponse);
  rpc Callback(CallbackRequest) returns (CallbackResponse);
}
